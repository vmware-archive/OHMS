REG_EVENT_URI=/api/1.0/hms/events/subscribe
UDP_PORT=0
THREAD_POOL_SIZE=12
MONITORING_THREAD_POOL_SIZE=60

HOST_NODE_MONITOR_FREQUENCY=600000

# While shutting down monitoring, HOST_NODE_MONITOR_FREQUENCY + SHUTDOWN_MONITORING_ADDITIONAL_WAITITME
# will be used as maximum wait time for graceful shutdown of the monitoring threads
SHUTDOWN_MONITORING_ADDITIONAL_WAITITME=60000

#RESOURCE MONITORING PROPERTIES
CPU_UTILIZATION_THRESHOLD=20
HEAP_MEMORY_THRESHOLD=20
THREAD_COUNT_THRESHOLD=100
HMS_RESOURCE_MONITOR_FREQUENCY=10000
HMS_RESOURCE_MONITOR_LOG_SIZE=20

# Disable restart of HMS server by monitor when above thresholds
hms.resource.monitor.disable.restarts = true

# Advanced network configuration properties
# Directory where network configurations are available
hms.network.configurations.directory = config

# Location of the rack inventory configuration file
# Default value = config/hms-inventory.json
hms.inventory.configuration.file = config/hms-inventory.json

# Switch connection timeout (in milliseconds)
hms.switch.connection.timeout=20000

#Basic auth credentials for PRM APIs.
prm.basic.auth.user=hmsguest
prm.basic.auth.password=hm$8u@St

#Add base class prefixes for partner plugins.
BOARD_SERVICE_BASE_PACKAGES=com.vmware,com.dell,com.arista,com.quanta,com.fujitsu,com.cisco,com.cumulus,serverview
hms_inband_module_app_id=hms_inband
#cpu, hdd, memory, nic info is cached if true
cache_server_info=true
#background server monitoring enable flag depends on HOST_NODE_MONITOR_FREQUENCY
enable_monitoring=false

# absolute path of the hms parent directory
hms.parent.dir=/opt/vrack

# absolute path of the hms directory
hms.dir=/opt/vrack/hms

# absolute path the of the upgrade dir
hms.upgrade.dir=/opt/vrack/upgrade

# upgrade script file name
hms.upgrade.script=hms_oob_upgrade_wrapper.sh

# rollback script file name
hms.rollback.script=hms_oob_recover_wrapper.sh

#Reattempts for node discovery, if it fails for the first time
hms.discovery.reattempts=3
#Time to wait before reattempting node discovery.
hms.discovery.reattempt.wait=15000
#IPMI Config file location
ipmi.config.file=config/connection.properties

#Thread Count for Executer Service Scheduler of hms plugin tasks
hms.task.scheduler.thread.count=5
#Time out to cancel the hms plugin task, if it exceeds beyond 5 mins
hms.plugin.task.timeout=300000

# Maximum time to wait for the server to process all active requests (in milliseconds), this property is related to http.read.timeout and should be less than http.read.timeout properties value
hms.service.maintenance.max-wait-time=300000
hms.service.maintenance.retry-interval=30000

#Path at which the HMS log files are kept which we add as the debug zip data
#Path for recent OOB log file
hms.log.path=/opt/vrack/hms/logs/hms.log
#Path for roll over OOB log file just after the recent log file
hms.log1.path=/opt/vrack/hms/logs/hms.log.1

#Path at which the temporary OOB logs files will be created
hms.temporary.log.directory=/opt/vrack/hms/logs/tempLogs

#Time difference with the current timestamp for deleting the temporary OOB zip log files, 10 mins
hms.temporary.log.file.clear.duration=600000

# Max Number of operations that can be call on Board / Switch service in parallel
hms.max.concurrent.tasks.per.node=5

# Time span(20 seconds) to sleep before reattempting to increase or decrease the count of concurrent operations on a node
hms.node.concurrent.operation.retry.thread.sleep.time=20000

#Changes for Hms cert mgmt
hms.certmgmt.base.dir=/opt/vrack/hmscertmgmt/
hms.certmgmt.work.dir=/opt/vrack/hmscertmgmt/work/

hms.inventory.reload.delay=10000
hms.aggregator.defaultip=192.168.100.40

#Changes for Hms mgmt switch key mgmt.
hms.mgmt.switch.ssh.key.file=/etc/ssh/ssh_host_%s_key
hms.mgmt.switch.ssh.rsa.public.key.file=/etc/ssh/ssh_host_rsa_key.pub
#This template-command will enable the session with root privileges, will take the backup of existing if existing
hms.mgmt.switch.ssh.keygen.setup.command=echo '%s' | sudo -S mkdir -p /etc/ssh/keys_backup; echo '%s' | sudo -S mv 1>/dev/null 2>&1 /etc/ssh/ssh_host_* /etc/ssh/keys_backup/;
#This template-command is responsible for generating ssh keys based on the algorithms rsa/dsa/ecdsa
hms.mgmt.switch.ssh.keygen.command=echo '%s' | sudo -S ssh-keygen -q -t %s -N '' -f %s;

# dhcp lease file
hms.mgmt.switch.dhcp.lease.file=/var/lib/dhcp/dhcpd.leases

#Changes for restrict Hms based on incoming Ip
hms.proxy.config.file=/etc/lighttpd/lighttpd-misc.conf
